#!/usr/bin/env bash

passdir=${PASSWORD_STORE_DIR:-$HOME/.password-store}

[[ ! -d "$passdir" ]] && _error "No password directory found!" "Pass: Error" "low"

switch_mode="Ctrl+s"
close_tomb="Ctrl-z"
open_tomb="Ctrl-o"
switch_mode="Ctrl-t"
addpass="Alt+a"
delete="Ctrl-x"
edit="Ctrl-y"

help_color="#7c5cff"
div_color="#334433"
label="#f067fc"

clipmethod="$XDG_SESSION_TYPE"

check_term() {
  [[ -n "$term" ]] && return
  for cmd in "$@"; do
    if command -v "$cmd" &>/dev/null; then
      term="$cmd"
      break
    fi
  done
}

check_command() {
  for cmd in "$@"; do
    if ! command -v "$cmd" &>/dev/null; then
      return 1
    fi
  done
}

check_command rofi pass || echo "Error: $cmd could not be found. Please install it." >&2

function _notify() {
  local message="$1"
  local header="$2"
  local urgency="$3"
  echo "$message"
  notify-send -u "$urgency" "$header" "$message" --expire-time=4000 --wait
}

function _error() {
  _notify "$1" "$2" "$3"
  exit 1
}

function version() {
  echo "v.1.0.0"
}

function usage() {
  cat <<EOF
  ---------------------------------------------------
  ---------------------rofi-pass---------------------
  ---------------------------------------------------
  -------------A rofi extension for pass-------------
  ---------------------------------------------------

Usage: pass-rofi [options] <command> [arguments]

Options:
  -f             Force swap restrictions
  -h             Display this help message and exit
  -l             Default password length on generation
  -t             Default terminal emulator (for tomb)
  -v             Display the current version number

Commands:
  help                     Display this help message and exit
  version                  Display the current version number

Examples:
  rofipass -f -l 72 -t kitty
EOF
}

function _rofi() {
  rofi -dmenu -i -no-levenshtein-sort -width 1000 "$@"
}

if ! command -v dunst &>/dev/null; then
  echo "dunst could not be found. Please install it."
  exit 1
fi

clearboard() {
  [ -x "$(command -v dunst)" ] && dunstctl close-all

  case "$clipmethod" in
  x11)
    echo "" | xclip -sel clip
    ;;
  wayland)
    [ -x "$(command -v cliphist)" ] && cliphist wipe
    echo "" | wl-copy
    ;;
  esac
}

function tomb_open() {
  check_term ghostty kitty alacritty konsole wezterm foot xterm
  if [ "$FORCE" == "true" ]; then
    $term -- sh -c "pass open -f"
  else
    $term -- sh -c "pass open"
  fi
}

function tomb_close() {
  check_term ghostty kitty alacritty konsole wezterm foot xterm
  $term -- sh -c "pass close"
  pass_val=$?
  if [ "$pass_val" -ne 0 ]; then
    _error "Failed to close tomb!" "Pass: Tomb" "critical"
  else
    _notify "Your password tomb has been closed!" "Pass: Tomb" "normal"
  fi
}

function deleteMenu() {
  delask=$(echo -e "1. Yes\n2. No" | _rofi -p '> ' -mesg "<span color='${label}'>Really delete</span> <span color='${help_color}'>$menu?</span>")
  val=$?
  if [[ $val -eq 1 ]]; then
    notify-send -u low "Pass: Delete" "Cancelled!"
    mode=pass main
  fi
  if [[ "$delask" == "1. Yes" ]]; then
    pass rm -f "$menu" && notify-send -u normal "Pass: Delete" "Deleted $menu"
  fi
  mode=pass main
}

function addMenu() {
  length=${length:-72}
  addmenu=$(echo | _rofi -p '> ' -mesg "<span color='${label}'>Usage: </span>Insert directory/passname")
  val=$?
  if [[ $val -eq 1 ]]; then
    notify-send -u low "Pass: Add" "Cancelled!"
    mode=pass main
  elif [[ $val -eq 0 ]]; then
    pass generate "$addmenu" "$length"
    if [[ $val -eq 1 ]]; then
      notify-send -u normal "Pass: Add" "An error occurred!"
      mode=pass main
    else
      notify-send -u normal "Pass: Add" "Added $addmenu"
    fi
  fi
  mode=pass main
}

function editMenu() {
  term=${TERMCMD:-kitty}
  if [ -z "$EDITOR" ]; then
    export EDITOR=nano
  fi
  $term -- sh -c "pass edit \"$menu\""
}

main() {
  if check_command tomb; then
    HELP="<span color='${label}'>Tomb: </span><span color='${help_color}'>${close_tomb}</span>: Close Tomb <span color='${div_color}'>|</span> <span color='${help_color}'>${open_tomb}</span>: Open Tomb
<span color='${label}'>Actions: </span><span color='${help_color}'>${switch_mode}</span>: Copy OTP <span color='${help_color}'>${addpass}</span>: Add <span color='${div_color}'>|</span> <span color='${help_color}'>${delete}</span>: Delete <span color='${div_color}'>|</span> <span color='${help_color}'>${edit}</span>: Edit"
  else
    HELP="<span color='${label}'>Modes: </span><span color='${help_color}'>${switch_mode}</span>: Toggle (pass/otp)
<span color='${label}'>Actions: </span><span color='${help_color}'>${switch_mode}</span>: Copy OTP <span color='${help_color}'>${addpass}</span>: Add <span color='${div_color}'>|</span> <span color='${help_color}'>${delete}</span>: Delete <span color='${div_color}'>|</span> <span color='${help_color}'>${edit}</span>: Edit"
  fi

  pass=$(find "$passdir" -type f -name '*.gpg' -printf '%P\n' | awk -F. '{print $1}')
  menu=$(echo "${pass}" | _rofi -p "$mode" -mesg "${HELP}" -kb-custom-1 "${addpass}" -kb-custom-2 "${switch_mode}" -kb-custom-3 "${delete}" -kb-custom-4 "${edit}" -kb-custom-5 "${close_tomb}" -kb-custom-6 "${open_tomb}")

  val=$?
  case "$val" in
  1) exit ;;
  12) deleteMenu ;;
  11) # OTP Copy
    timeout 3 pass otp -c "$menu" || _error "Error copying the OTP!" "Pass: OTP" "critical"
    _notify "Copied to clipboard. Clearing in 5 seconds" "Pass: OTP" "normal"
    clearboard
    ;;
  10) addMenu ;;
  13) editMenu ;;
  14) tomb_close ;;
  15) tomb_open ;;
  0)
    pass -c "$menu" || _error "Error copying the password!" "Pass: Copy" "critical"
    _notify "Copied to clipboard. Clearing in 5 seconds" "Pass: Copy" "normal"
    clearboard
    ;;
  esac
}

while getopts ":hvfl:t:" opt; do
  case "$opt" in
  h)
    usage
    exit 0
    ;;
  v)
    version
    exit 0
    ;;
  f)
    FORCE=true
    ;;
  l)
    length="$OPTARG"
    ;;
  t)
    term="$OPTARG"
    ;;
  ?)
    echo "Error: Invalid option '-$OPTARG'" >&2
    usage
    ;;
  esac
done

shift $((OPTIND - 1))

mode=pass main
